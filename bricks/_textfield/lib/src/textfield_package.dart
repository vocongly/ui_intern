import 'package:_textfield/src/ios/ios_base_textfield_item.dart';
import 'package:animated_text_kit/animated_text_kit.dart';
import 'package:flutter/material.dart';
import 'package:flutter_svg/svg.dart';
import 'package:path/path.dart' as path;

import 'common/common_base_textfield.dart';
import 'ios/ios_base_textfield.dart';

class TextfieldBrick {
  static Widget common({
    required ValueChanged<String> onChanged,
    required String title,
    bool required = false,
    String? errorText,
    required String hintText,
    required TextStyle textStyle,
    required TextStyle hintStyle,
    TextStyle? errorStyle,
    required TextStyle titleStyle,
    required Color disableTextColor,
    required Color disableBackgroundColor,
    FocusNode? focusNode,
    Color? backgroundColor,
    TextInputAction? textInputAction,
    ValueChanged<String>? onSubmit,
    Color errorBorderColor = Colors.red,
    String? initialValue,
    bool isObscured = false,
    bool enable = true,
    EdgeInsets? contentPadding,
    BorderRadius? borderRadius,
    double? focusBorderWidth,
    Color focusBorderColor = Colors.green,
    TextEditingController? textEditingController,
    TextCapitalization textCapitalization = TextCapitalization.none,
    bool autoFocus = false,
    int? maxLength,
    int maxLines =1,
    bool readOnly = false,
    TextAlign textAlign = TextAlign.start,
    TextAlignVertical textAlignVertical = TextAlignVertical.center,
    VoidCallback? onSuffixIconTap,
    VoidCallback? onPrefixIconTap,
    String? prefixIconPath,
    String? suffixIconPath,
    double? iconSize,
    Color? iconColor,
    Color textColor = Colors.black,
    List<BoxShadow>? shadow,
    TextInputType? textInputType,
  }) {
    return CommonBaseTextfield(
      onChanged: onChanged,
      required: required,
      title: title,
      errorText: errorText,
      textStyle: textStyle,
      hintStyle: hintStyle,
      errorStyle: errorStyle,
      titleStyle: titleStyle,
      disableTextColor: disableTextColor,
      disableBackgroundColor: disableBackgroundColor,
      onSubmit: onSubmit,
      hintText: hintText,
      errorBorderColor: errorBorderColor,
      initialValue: initialValue,
      isObscured: isObscured,
      enable: enable,
      contentPadding: contentPadding,
      focusNode: focusNode,
      borderRadius: borderRadius,
      focusBorderWidth: focusBorderWidth,
      focusBorderColor: focusBorderColor,
      textEditingController: textEditingController,
      textCapitalization: textCapitalization,
      autoFocus: autoFocus,
      maxLength: maxLength,
      maxLines: maxLines,
      backgroundColor: backgroundColor,
      readOnly: readOnly,
      textAlign: textAlign,
      textAlignVertical: textAlignVertical,
      textInputAction: textInputAction,
      onPrefixIconTap: onPrefixIconTap,
      onSuffixIconTap: onSuffixIconTap,
      prefixIconPath: prefixIconPath,
      suffixIconPath: suffixIconPath,
      iconColor: iconColor,
      textColor: textColor,
      iconSize: iconSize,
      shadow: shadow,
      textInputType: textInputType,
    );
  }

  static Widget search({
    required ValueChanged<String> onChanged,
    required String hintText,
    required TextStyle textStyle,
    required TextStyle hintStyle,
    required Color disableTextColor,
    required Color disableBackgroundColor,
    FocusNode? focusNode,
    BorderRadius? borderRadius,
    Color? backgroundColor,
    TextInputAction? textInputAction,
    ValueChanged<String>? onSubmit,
    bool isValid = true,
    String? initialValue,
    bool isObscured = false,
    bool enable = true,
    EdgeInsets? contentPadding,
    TextEditingController? textEditingController,
    TextCapitalization textCapitalization = TextCapitalization.none,
    bool autoFocus = false,
    int? maxLength,
    int maxLines = 1,
    bool readOnly = false,
    TextAlign textAlign = TextAlign.start,
    TextAlignVertical textAlignVertical = TextAlignVertical.center,
    String? prefixIconPath,
    VoidCallback? onPrefixIconTap,
    double? iconSize,
    Color? iconColor,
    List<BoxShadow>? shadow,
    TextInputType? textInputType,
    double? textfieldWidth,
  }) {
    return CommonBaseTextfield(
      onChanged: onChanged,
      textStyle: textStyle,
      hintStyle: hintStyle,
      disableTextColor: disableTextColor,
      disableBackgroundColor: disableBackgroundColor,
      onSubmit: onSubmit,
      borderRadius: borderRadius,
      hintText: hintText,
      initialValue: initialValue,
      isObscured: isObscured,
      enable: enable,
      contentPadding: contentPadding,
      focusNode: focusNode,
      textEditingController: textEditingController,
      textCapitalization: textCapitalization,
      autoFocus: autoFocus,
      maxLength: maxLength,
      maxLines: maxLines,
      backgroundColor: backgroundColor,
      readOnly: readOnly,
      textAlign: textAlign,
      textAlignVertical: textAlignVertical,
      textInputAction: textInputAction,
      onPrefixIconTap: onPrefixIconTap,
      prefixIconPath: prefixIconPath,
      iconColor: iconColor,
      iconSize: iconSize,
      shadow: shadow,
      textInputType: textInputType,
      isSearch: true,
    );
  }

  static Widget animationSearch({
    required VoidCallback onPressed,
    BorderRadius? borderRadius,
    required String searchIconPath,
    required TextStyle animationTextStype,
    required String animationText,
    required Color backgroundColor,
    required Color iconColor,
    double? iconSize,
    VoidCallback? onIconPressed,
  }) {
    return InkWell(
      onTap: onPressed,
      child: Container(
        decoration: BoxDecoration(
            borderRadius: borderRadius ?? BorderRadius.circular(12),
            color: backgroundColor),
        child: Row(
          children: [
            IconButton(
              icon: path.extension(searchIconPath) == ".svg"
                  ? SvgPicture.asset(
                      searchIconPath,
                      color: iconColor,
                      height: iconSize,
                      width: iconSize,
                      fit: BoxFit.contain,
                    )
                  : Image.asset(
                      searchIconPath,
                      height: iconSize,
                      color: iconColor,
                      width: iconSize,
                      fit: BoxFit.contain,
                    ),
              onPressed: onIconPressed,
            ),
            DefaultTextStyle(
              style: animationTextStype,
              child: AnimatedTextKit(
                repeatForever: true,
                isRepeatingAnimation: true,
                animatedTexts: [
                  TyperAnimatedText(animationText,
                      speed: const Duration(milliseconds: 200)),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  static IOSBaseTextfieldItem iOSItem({
    required ValueChanged<String> onChanged,
    ValueChanged<String>? onSubmit,
    required String title,
    required String hintText,
    bool isValid = true,
    String? initialValue,
    bool isObscured = false,
    bool enable = true,
    EdgeInsets? titlePadding,
    double? titleStarSpacing,
    EdgeInsets? contentPadding,
    FocusNode? focusNode,
    BorderRadius? borderRadius,
    double? underBorderWidth,
    Color underLineColor = Colors.grey,
    TextEditingController? textEditingController,
    TextCapitalization textCapitalization = TextCapitalization.none,
    bool autoFocus = false,
    int? maxLength,
    int? maxLines,
    required Color backgroundColor,
    bool readOnly = false,
    required TextStyle textStyle,
    required TextStyle hintStyle,
    required TextStyle titleStyle,
    TextAlign textAlign = TextAlign.start,
    TextAlignVertical textAlignVertical = TextAlignVertical.center,
    TextInputAction? textInputAction,
    TextInputType? textInputType,
    double verticalItemSpacing = 8,
    required Color disableTextColor,
    required Color disableBackgroundColor,
    bool isNavigation = false,
    double? iconSize,
    Color? iconColor,
    AlignmentGeometry? iconAlign,
    VoidCallback? onNavigationPressed,
  }) {
    return IOSBaseTextfieldItem(
      onChanged: onChanged,
      title: title,
      backgroundColor: backgroundColor,
      textStyle: textStyle,
      hintStyle: hintStyle,
      titleStyle: titleStyle,
      disableTextColor: disableTextColor,
      disableBackgroundColor: disableBackgroundColor,
      onSubmit: onSubmit,
      hintText: hintText,
      isValid: isValid,
      initialValue: initialValue,
      isObscured: isObscured,
      enable: enable,
      titlePadding: titlePadding,
      titleStarSpacing: titleStarSpacing,
      contentPadding: contentPadding,
      focusNode: focusNode,
      borderRadius: borderRadius,
      underBorderWidth: underBorderWidth,
      underLineColor: underLineColor,
      textEditingController: textEditingController,
      textCapitalization: textCapitalization,
      autoFocus: autoFocus,
      maxLength: maxLength,
      maxLines: maxLines,
      readOnly: readOnly,
      textAlign: textAlign,
      textAlignVertical: textAlignVertical,
      textInputAction: textInputAction,
      textInputType: textInputType,
      verticalItemSpacing: verticalItemSpacing,
      isNavigation: isNavigation,
      iconSize: iconSize,
      iconColor: iconColor,
      iconAlign: iconAlign,
      onNavigationPressed: onNavigationPressed,
    );
  }

  static Widget iOS({
    required String groupTitle,
    required TextStyle groupTitleStyle,
    required String errorText,
    required TextStyle errorStyle,
    required TextStyle descriptionStyle,
    required String description,
    BorderRadius? borderRadius,
    EdgeInsets? groupTitlePadding,
    EdgeInsets? descriptionPadding,
    EdgeInsets? errorTextPadding,
    required List<IOSBaseTextfieldItem> items,
    bool isValid = true,
  }) {
    return IOSBaseTextfield(
        groupTitle: groupTitle,
        groupTitlePadding: groupTitlePadding,
        borderRadius: borderRadius,
        descriptionPadding: descriptionPadding,
        errorTextPadding: errorTextPadding,
        isValid: isValid,
        errorText: errorText,
        description: description,
        items: items,
        groupTitleStyle: groupTitleStyle,
        errorStyle: errorStyle,
        descriptionStyle: descriptionStyle);
  }
}
